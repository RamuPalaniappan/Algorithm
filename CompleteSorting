/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
import java.util.Arrays;
import java.util.Scanner;
public class Main
{
  public static void main (String[]args)
  {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter the array size:");
    int n = input.nextInt ();	// array length is got as an input from the user - 1st property for the class
    int array[] = new int[n];
    System.out.println ("Enter the elements of the array:");	// array elements are got as an input from the user - 2nd property for the class
    for (int i = 0; i < n; i++)
    {
	   array[i] = input.nextInt ();
    }
    Sorting sortBy = new Sorting (array);
    
    System.out.println("The given array is sorted using Bubble Sort:");
    sortBy.bubbleSort ();
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Selection Sort:");
    sortBy.selectionSort1();
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Insertion Sort:");
    sortBy.insertionSort(array);
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Merge Sort:");
    sortBy.mergesort(array,0,array.length-1);
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Quick Sort:");
    sortBy.quickSortWithMiddleElementAsPivot(array,0,array.length-1);
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Quick3 Sort:");
    sortBy.quick3sortWithCallByReferenceObject(array,0,array.length-1);
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Shell Sort:");
    sortBy.shellSort();
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Heap Sort:");
    sortBy.heapSort(array);
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Count Sort:");
    sortBy.countSort(array);
    sortBy.Print ();
    
    System.out.println("The given array is sorted using Radix Sort:");
    sortBy.radixSort(array);
    sortBy.Print ();
    
    //sortBy.quickSortWithLeftElementAsPivot(array,0,array.length-1);
    //sortBy.quickSortWithRightElementAsPivot(array,0,array.length-1);
    //sortBy.quick3sortWithCallByReferenceArray(array,0,array.length-1);
  }
public static class Sorting
{
    int array[];
    public Sorting (int inputArray[])
        {
            array = inputArray;
            
        }
 
   
    public void bubbleSort ()
      {
        int n = array.length;
    
        for (int i = 0; i < n - 1; i++)
          {
    	for (int j = 0; j < n - 1; j++)
    	  {
    	    if (array[j] > array[j + 1])
    	      {
    		int temp;
    		temp = array[j];
    		array[j] = array[j + 1];
    		array[j + 1] = temp;
    	      }
    	  }
          }
        }
        
    public void selectionSort1 ()
    {
        int n = array.length;

        for (int i = 0; i < n -1; i++)
          {
    	for(int j=1;j<n-i;j++)   
    	  {
            if (array[i] > array[j+i])
    	      {
        		int temp;
        		temp = array[i];
        		array[i] = array[j+i];
        		array[j+i] = temp;
    	       }
    	    }
          }
    }
    
    public static void insertionSort(int [] array){
	    for(int i = array.length-2; i >=0 ; i--)
	    {
	        int toBeInserted = array[i];
	        for(int j = i; j < array.length-1 && toBeInserted > array[j+1] ; j++)
	        {
	            int slidingValue = array[j+1];
	            array[j+1] = toBeInserted;
	            array[j] = slidingValue;
	        }
	    }
    }
   void merge(int arr[], int l, int m, int r)
    {
        int n1 = m - l + 1;
        int n2 = r - m;
 
        int L[] = new int [n1];
        int R[] = new int [n2];
        
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];
            
        int i = 0, j = 0;
        int k = l;
        
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    void mergesort(int arr[], int l, int r)
    {
        if (l < r)
        {
            int m = (l+r)/2;
            mergesort(arr, l, m);
            mergesort(arr , m+1, r);
            merge(arr, l, m, r);
        }
    }
    
    
    
    static void quickSortWithLeftElementAsPivot(int array[],int l,int r)
	{
	   if (l < r)
	    {
	    int pivot = array[l];
	    int i = r;
	    int j = r;

	        for(; j>l;j--)
	        {
	            if(pivot < array[j])
	            {
	            int temp = array[i];
	            array[i]=array[j];
	            array[j]=temp;
	            i--;
	            }
	        }
	        int temp = array[i];
	        array[i]= array[j];
	        array[l] = temp;
	        quickSortWithLeftElementAsPivot(array,l,i-1);
	        quickSortWithLeftElementAsPivot(array,i+1,r);
	    }
	    
	}
	
	
	static void quickSortWithRightElementAsPivot(int array[],int l,int r)
	{
	   if (r>l)
	    {
	    int pivot = array[r];
	    int i = l;
	    int j = l;

	        for(; j<r;j++)
	        {
	            if(pivot > array[j])
	            {
	            int temp = array[i];
	            array[i]=array[j];
	            array[j]=temp;
	            i++;
	            }
	        }
	        int temp = array[i];
	        array[i]= array[j];
	        array[r] = temp;
	        quickSortWithRightElementAsPivot(array,l,i-1);
	        quickSortWithRightElementAsPivot(array,i+1,r);
	    }

	}
	
	
	static void quickSortWithMiddleElementAsPivot(int array[],int l,int r)
	{
	      int i = l ; 
	      int j = r;
	      int middle = l +(r-l)/2;
	      int pivot = array[middle];
	      while(i <= j){
	          while (array[i]<pivot)
	          {
	              i++;
	          }
	          while (array[j] > pivot)
	          {
	              j--;
	          }
	          
	          if(i <= j )
	          {
	          int temp = array[i];
	          array[i] = array[j];
	          array[j] = temp;
	          i++; j --;
	          }
	      }
	      if(l<i-1){
	          quickSortWithMiddleElementAsPivot(array,l,i-1);
	      }
	      if(i < r){
	          quickSortWithMiddleElementAsPivot(array, i, r);
	      }
	      
	  }

    public static void quick3sortWithCallByReferenceObject(int[] array, int low, int high)  {
		 if (low>=high) //1 or 0 elements  
            return;  
        IrefValues iobject = new IrefValues(0);
        JrefValues jobject = new JrefValues(0);
        partition(array, low, high, iobject,jobject); 
        quick3sortWithCallByReferenceObject(array, low, iobject.i);  
        quick3sortWithCallByReferenceObject(array, jobject.j, high);
	}
	public static void partition(int[] array, int low, int high,IrefValues iobj, JrefValues jobj)  
    {  
        if (high - low <= 1)  
        {  
            if (array[high] < array[low])  
                {
                    int temp = array[high];
                    array[high]= array[low];
                    array[low]= temp;
                }  
            iobj.i = low; jobj.j = high;  return;  
        }  
        
        int mid = low;  int pivot = array[high];  
        while (mid <= high)  
        {  
            if (array[mid]<pivot)  
            {
                int temp = array[low];
                array[low]=array[mid];
                array[mid] = temp;
                low++;mid++;
            }
            else if (array[mid]==pivot) 
            {
                mid++;  
            }
            else if (array[mid]>pivot)  
            {
                int temp = array[mid];
                array[mid]=array[high];
                array[high]= temp;
                high--;
            }
        }   
        iobj.i = low-1;  jobj.j = mid; //or high-1  
    }


        public static class IrefValues{
            int i=0;
            public IrefValues(int i ){
            this.i =i;
            }
        }
                
        public static class JrefValues{
            int j = 0;
            public JrefValues(int j){
                this.j =j;
            }
        }
        
    public static void quick3sortWithCallByReferenceArray(int[] array, int low, int high)  {
		 if (low>=high) //1 or 0 elements  
            return;  
        int ref[] ={0,0};
        ref=partitionForArray(array, low, high, ref[0],ref[1]); 
        quick3sortWithCallByReferenceArray(array, low, ref[0]);  
        quick3sortWithCallByReferenceArray(array, ref[1], high);
	}
	public static int[] partitionForArray(int[] array, int low, int high,int i, int j)  
    {  
        int refArray[] = new int[2];
        if (high - low <= 1)  
        {  
            if (array[high] < array[low])  
                {
                    int temp = array[high];
                    array[high]= array[low];
                    array[low]= temp;
                }  
       i = low; j = high; 
       refArray[0]=i;
       refArray[1]=j;
       return refArray;  
        }  
        int mid = low;  int pivot = array[high];  
        while (mid <= high)  
        {  
            if (array[mid]<pivot)  
            {
                int temp = array[low];
                array[low]=array[mid];
                array[mid] = temp;
                low++;mid++;
            }
            else if (array[mid]==pivot) 
            {
                mid++;  
            }
            else if (array[mid]>pivot)  
            {
                int temp = array[mid];
                array[mid]=array[high];
                array[high]= temp;
                high--;
            }
        }   
        i = low-1;  j= mid; //or high-1  
        refArray[0]=i;
        refArray[1]=j;
        return refArray; 
    }
    
    
    public static void heapSort(int [] array){
	    for(int j = array.length; j>1; j--) 
            {
                for( int i = j/2 -1; i>=0; i--)
                    { 
                        maxheap(array, j, i); 
                    }
                    int temp = array[j-1];
                    array[j-1] = array[0];
                    array[0]= temp;
              }
	}
	public static void maxheap(int array[], int n, int i)
            {
                 int left = 2 * i + 1; 
                 int right = 2 * i + 2;
                 int bigchild = left;
            
                if(right < n  && array[left] < array[right]) 
                {  bigchild = right;  }
              
                if(array[bigchild] > array[i]) 
                {   
                    int temp = array[i];
                    array[i]= array[bigchild];
                    array[bigchild] = temp;
                }
            }
    
    public void shellSort ()
      {
        int n = array.length;
         for(int gap = n/2; gap > 0; gap = gap/2)
        {
            for(int fw = gap; fw < n; fw++)
            {
                int tbi = array[fw], rv; 
                for(rv = fw-gap; rv >= 0; rv = rv-gap)
                {                        
                    if(tbi < array[rv])
                    {
                      array[rv+gap] = array[rv];
                    }                        
                    else 
                    {
                        break;
                    }
                }
                array[rv+gap] = tbi; 
              }
            }
      }
      
    public static void countSort (int [] array){
	    int max = array[0] , min =array[0];
	    for(int i=0; i <array.length; i++)// n
	    {
	        if(array[i]>max)
	        {
	            max = array[i];
	        } else if(array[i]<min)
	        {
	            min = array[i];
	        }
	    }
	    int [] bucket = new int[ max - min + 1];
	    int [] output = new int[array.length];
	    int outputIndex = 0;
	    
	    for(int i=0; i < array.length; i++)//n
	    {
	        bucket[array[i]-min]++;
	    }
	    
	    for(int i =0; i < bucket.length; i++)//m
	    {
	        for(int j = 0; j < bucket[i]; j++)//m
	        {
	            array[outputIndex] = i +min;
	            outputIndex++;
	        }
	    }
    }
    
    public static void radixSort(int [] array){
	    
	    int max = array[0];
		for(int i = 1; i < array.length; i++)
		{
		    if(array[i]>max)
		    {
		        max = array[i];
		    }
		}
		
		int maxLength = String.valueOf(max).length();
		 
		for(int i = 0, div = 1; i < maxLength ; i++, div *= 10 )
		{
		    countSortUsedByRadix(array,div);
		}
	}
	
	public static int[] countSortUsedByRadix(int [] array, int div)
	{
	    int [] bucket = new int[10];
	    int [] outputArray = new int [array.length];
	    
	    for(int i = 0 ; i < array.length; i++)
	    {
	        int val = (array[i]/div)%10;
	        bucket[val]++;
	    }

	    bucket[0] = bucket[0]-1;
	    for(int i = 1; i < 10 ; i++)
	    {
	        bucket[i] += bucket[i-1];
	    }
	    
	    for(int i = array.length-1; i >= 0 ; i --)
	    {
	        int val = (array[i]/div)%10;
	        int index = bucket[val]--;
	        outputArray[index]=array[i];
	    }
	    
	    for(int i = 0 ; i < array.length ; i++)
	    {
	        array[i]= outputArray[i];
	    }
	    
	    return array;
	}
    
   
  public void Print ()
  {
    System.out.println (Arrays.toString (array));
    
  }
}

}







